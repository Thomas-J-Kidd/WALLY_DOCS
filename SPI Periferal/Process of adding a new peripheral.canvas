{
	"nodes":[
		{"id":"4ceb4763385d2261","type":"text","text":"## config.vh\nsource: \n```location\n\ncvw/config/rv64gc/config.vh\n```\n\nedited code\n```config.vh\nlocalparam SPI_SUPPORTED = 1'b1;\nlocalparam logic [63:0] SPI_BASE =   64'h1000007F;\nlocalparam logic [63:0] SPI_RANGE =  64'h00000FFF; // *** BUG double check specs for address space on SPI module\n```\n\n- the range is from 7F because the SPI register block found in the pdf [[ds843_axi_quad_spi.pdf]] has an address range of 7F. This info can be found in Table 9 or page 29 in the Register Overview Table\n","x":-1120,"y":-275,"width":544,"height":615},
		{"id":"2f98f5e9b991c47e","type":"text","text":"## adrdecs.sv\n\nsource:\n\n```location\n~/cvw/src/mmu/adrdecs.sv\n```\n\nexpanded the logic from 10 bits to 11 bits\n\n```verilog\noutput logic [11:0]          SelRegions\n```\n\nadded a new region of physcal memory. Added it to the top since we made the SPI the 11th bit\n\n```verilog\nadrdec #(P.PA_BITS) spidec(PhysicalAddress, P.SPI_BASE[P.PA_BITS-1:0], P.SPI_RANGE[P.PA_BITS-1:0], P.SPI_SUPPORTED, AccessRW, Size,  4'b0100, SelRegions[11]); // *** Double check supported size in specs\n```\n\n- Supported size is 4'b0100. This means 32 bits. The order is the following\n\t- 1000 = 64 bits\n\t- 0100 = 32 bits\n\t- 0010 = half word\n\t- 0001 = byte\n\nexpanded the bit count from 10 to 11\n```verilog\nassign SelRegions[0] = ~|(SelRegions[11:1]); // none of the regions are selected\n```\n\n","x":40,"y":-275,"width":680,"height":815,"color":"3"},
		{"id":"cd3fe460b4373ec5","type":"text","text":"## pmachecker.sv\n\nsource:\n```location\n~/cvw/src/mmu/pmachecker.sv\n```\n\n\nexpanded # of bits on line 47 of SelRegions from 10 to 11\n```verilog\nlogic [11:0]                 SelRegions;\n```\n","x":-520,"y":-275,"width":522,"height":615,"color":"3"},
		{"id":"0996cde5c44ce0b2","type":"text","text":"# MMU","x":-37,"y":-560,"width":154,"height":60,"color":"3"},
		{"id":"7dc7a74000e43c5a","type":"text","text":"## uncore.sv\n\nsource: \n```location\n~/cvw/src/uncore/uncore.sv\n```\n\nexpanded HSELRegions from 10 to 11 bits\n```verilog\nlogic [11:0]                 HSELRegions;\n```\n\nAdded HSELSPI internal variable to deal with SPI in uncore\n```verilog\nlogic                        HSELDTIM, HSELIROM, HSELRam, HSELCLINT, HSELPLIC, HSELGPIO, HSELUART, HSELSDC, HSELSPI;\n```\n\nAdded HSELSPID internal variable to deal with SPI in uncore\n```verilog\nlogic                        HSELDTIMD, HSELIROMD, HSELEXTD, HSELRamD, HSELCLINTD, HSELPLICD, HSELGPIOD, HSELUARTD, HSELSPID;\n```\n\nNeed to expand this vairable to 5 bits when spi is implemented\n- without spi implemented\n```verilog\nlogic [3:0][P.XLEN-1:0]      PRDATA;\n```\n- with spi implemented\n```verilog\nlogic [4:0][P.XLEN-1:0]      PRDATA;\n```\n\nNeed to expand this variable to 5 bits when spi is implemented\n- without spi implemented\n```verilog\nlogic [3:0]                  PSEL, PREADY;\n```\n- with spi implemented\n```verilog\nlogic [4:0]                  PSEL, PREADY;\n```\n\nExpanded the unswizzle HSEL signals from 10 to 11 bits\n```verilog\n// unswizzle HSEL signals\n  assign {HSELSPI, HSELDTIM, HSELIROM, HSELEXT, HSELBootRom, HSELRam, HSELCLINT, HSELGPIO, HSELUART, HSELPLIC, HSELEXTSDC} = HSELRegions[11:1];\n```\nModify the APB bridge by adding HSELSPI\n- expand the (p, 4) to (p, 5)\n```verilog\n// AHB -> APB bridge\n  ahbapbbridge #(P, 4) ahbapbbridge (\n    .HCLK, .HRESETn, .HSEL({HSELSPI, HSELUART, HSELPLIC, HSELCLINT, HSELGPIO}), .HADDR, .HWDATA, .HWSTRB, .HWRITE, .HTRANS, .HREADY,\n    .HRDATA(HREADBRIDGE), .HRESP(HRESPBRIDGE), .HREADYOUT(HREADYBRIDGE),\n    .PCLK, .PRESETn, .PSEL, .PWRITE, .PENABLE, .PADDR, .PWDATA, .PSTRB, .PREADY, .PRDATA);\n  assign HSELBRIDGE = HSELSPI | HSELGPIO | HSELCLINT | HSELPLIC | HSELUART; // if any of the bridge signals are selected\n```\n\nAdd an spi block\n- 7 bit address size\n```verilog\n   if (P.SPI_SUPPORTED == 1) begin : spi\n    spi_apb #(P) spi(\n      .PCLK, .PRESETn, .PSEL(PSEL[4]), .PADDR(PADDR[6:0]), .PWDATA, .PSTRB, .PWRITE, .PENABLE, \n      .PRDATA(PRDATA[4]), .PREADY(PREADY[4]));\n      // *** io for spi\n //     assign PRDATA[4] = '0; // Temprorary until SPI apb is good\n //     assign PREADY[4] = 1'b1; // Temprorary until SPI apb is good\n  end else begin : spi\n    // assign UARTSout = 0; assign UARTIntr = 0; \n  end\n```\n\nadd HSELSPID\n\n```verilog\nflopenl #(12) hseldelayreg(HCLK, ~HRESETn, HREADY, HSELRegions, 12'b1, {HSELSPID, HSELDTIMD, HSELIROMD, HSELEXTD, HSELBootRomD, HSELRamD, HSELCLINTD, HSELGPIOD, HSELUARTD, HSELPLICD, HSELEXTSDCD, HSELNoneD});\n```\n","x":911,"y":-275,"width":689,"height":1995,"color":"4"},
		{"id":"7ec00eea2d8a0356","type":"text","text":"# uncore","x":1131,"y":-560,"width":250,"height":60,"color":"4"},
		{"id":"b317dc41627faf7e","type":"text","text":"PREADY has to be high two times","x":1722,"y":-135,"width":250,"height":55},
		{"id":"8d83322066b29958","type":"text","text":"## spi_apb.sv\n\nsource: \n```\n~/cvw/src/uncore/spi_apb.sv\n```\nCopy over from the uart_apb.sv\n\nChange the PADDR to \n```verilog\ninput  logic [6:0]          PADDR,\n```\n\n\nThere are 5 entry signals\n```verilog\nlogic [4:0]      entry;\n```\n\nSPI register implementation\n```verilog\n// *** implement 1-2 registers for SPI specs\n  localparam SPISR = 7'h64;\n  logic [31:0] SPISR_REG;\n  \n  flopenl #(32) spisrregister(PCLK, ~PRESETn, 1'b0, '0, 32'h0a5, SPISR_REG);\n\n  always_comb begin\n        case (entry)\n          SPISR[6:2]: PRDATA = SPISR_REG;\n          default: PRDATA = SPISR_REG;\n        endcase\n  end\n```\n","x":2218,"y":-275,"width":782,"height":1995}
	],
	"edges":[
		{"id":"6a2349e2c3ada87a","fromNode":"0996cde5c44ce0b2","fromSide":"bottom","toNode":"cd3fe460b4373ec5","toSide":"top"},
		{"id":"c0bdbbc82f64ade3","fromNode":"0996cde5c44ce0b2","fromSide":"bottom","toNode":"2f98f5e9b991c47e","toSide":"top"},
		{"id":"5788ebb92518e58e","fromNode":"7ec00eea2d8a0356","fromSide":"bottom","toNode":"7dc7a74000e43c5a","toSide":"top"},
		{"id":"965c6cbbecf2c48c","fromNode":"7dc7a74000e43c5a","fromSide":"right","toNode":"b317dc41627faf7e","toSide":"left"}
	]
}